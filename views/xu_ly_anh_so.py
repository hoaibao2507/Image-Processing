import streamlit as st
import cv2
import numpy as np
import Chapter.Chapter3 as c3
import Chapter.Chapter4 as c4
import Chapter.Chapter9 as c9


st.set_page_config(page_title="X·ª≠ l√Ω ·∫£nh Ch∆∞∆°ng 3 & 4", layout="wide")

# === Danh s√°ch thu·∫≠t to√°n theo ch∆∞∆°ng ===
chapter_options = ["Ch∆∞∆°ng 3", "Ch∆∞∆°ng 4", "Ch∆∞∆°ng 9"]

chapter_choice = st.sidebar.selectbox("üìò Ch·ªçn ch∆∞∆°ng x·ª≠ l√Ω ·∫£nh", chapter_options)

if chapter_choice == "Ch∆∞∆°ng 3":
    functions = {
        "1. Negative": ("images/1.tif", c3.Negative),
        "2. Logarit": ("images/2.tif", c3.Logarit),
        "3. Power": ("images/3.tif", c3.Power),
        "4. PiecewiseLinear": ("images/4&6.jpg", c3.PiecewiseLinear),
        "5. Histogram": ("images/5.tif", c3.Histogram),
        "6. C√¢n b·∫±ng Histogram": ("images/4&6.jpg", c3.HistEqual),
        "7. C√¢n b·∫±ng Histogram ·∫£nh m√†u": ("images/7.tif", c3.HistEqualColor),
        "8. Local Histogram": ("images/8&9.tif", c3.LocalHist),
        "9. Th·ªëng k√™ Histogram": ("images/8&9.tif", c3.HistStat),
        "10. L·ªçc Gauss (Gaussian Filter)": ("images/10&11.tif", c3.GaussFilter),
        "11. L·ªçc trung b√¨nh (Box Filter)": ("images/10&11.tif", c3.BoxFilter),
        "12. Ng∆∞·ª°ng h√≥a (Threshold)": ("images/12.tif", c3.Threshold),
        "13. L·ªçc trung v·ªã (Median Filter)": ("images/13.tif", c3.MedianFilter),
        "14. L√†m s·∫Øc n√©t (Sharpen)": ("images/14.tif", c3.Sharpen),
        "15. Gradient": ("images/15.tif", c3.Gradient),
    }

elif chapter_choice == "Ch∆∞∆°ng 4":
    functions = {
        "1. Ph·ªï ·∫£nh (Spectrum)": ("images/c4_1.tif", c4.Spectrum),
        "2. B·ªô l·ªçc t·∫ßn s·ªë cao (Frequency Filter)": ("images/10&11.tif", c4.FrequencyFilter),
        "3. T·∫°o b·ªô l·ªçc Notch Reject": ("images/c4_1.tif", c4.DrawNotchRejectFilter),
        "4. Kh·ª≠ nhi·ªÖu Moire": ("images/c4_2.tif", c4.RemoveMoire),
    }

elif chapter_choice == "Ch∆∞∆°ng 9":
    functions = {
        "1. ConnectedComponent": ("images/ConnectedComponent.tif", c9.ConnectedComponent),
        "2. ƒê·∫øm h·∫°t g·∫°o": ("images/gao.tif", c9.CountRice),
    }


# === Giao di·ªán ch·ªçn thu·∫≠t to√°n
choice = st.sidebar.selectbox("üõ†Ô∏è Ch·ªçn thu·∫≠t to√°n", list(functions.keys()))
sample_image_path, function_to_apply = functions[choice]

# === Nh·∫≠n bi·∫øt ·∫£nh m√†u
is_color_required = "m√†u" in choice.lower() or (chapter_choice == "Ch∆∞∆°ng 3" and function_to_apply == c3.HistEqualColor)

# === ƒê·ªçc ·∫£nh
imgin = cv2.imread(sample_image_path, cv2.IMREAD_COLOR if is_color_required else cv2.IMREAD_GRAYSCALE)

# === X·ª≠ l√Ω ·∫£nh
result = function_to_apply(imgin)
if isinstance(result, tuple):
    imgout, info = result
    st.success(f"üìä K·∫øt qu·∫£ th·ªëng k√™: {info} ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ph√°t hi·ªán.")
else:
    imgout = result
    info = None


# === Hi·ªÉn th·ªã k·∫øt qu·∫£
col1, col2 = st.columns(2)
with col1:
    st.subheader("üñºÔ∏è ·∫¢nh G·ªëc")
    st.image(imgin, use_container_width=True, channels="GRAY" if len(imgin.shape) == 2 else "RGB")
with col2:
    st.subheader("‚úÖ ·∫¢nh Sau X·ª≠ L√Ω")
    st.image(imgout, use_container_width=True, channels="GRAY" if len(imgout.shape) == 2 else "RGB")

# === T·∫£i ·∫£nh ng∆∞·ªùi d√πng
st.markdown("---")
uploaded_file = st.file_uploader("üì§ T·∫£i ·∫£nh c·ªßa b·∫°n ƒë·ªÉ th·ª≠ thu·∫≠t to√°n n√†y", type=["jpg", "jpeg", "png", "bmp", "tif"])
if uploaded_file is not None:
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    img_custom = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR if is_color_required else cv2.IMREAD_GRAYSCALE)
    img_custom_out = function_to_apply(img_custom)

    st.markdown("### üîÑ K·∫øt qu·∫£ tr√™n ·∫£nh c·ªßa b·∫°n:")
    col3, col4 = st.columns(2)
    with col3:
        st.image(img_custom, caption="·∫¢nh b·∫°n t·∫£i l√™n", use_container_width=True, channels="GRAY" if len(img_custom.shape) == 2 else "RGB")
    with col4:
        st.image(img_custom_out, caption="·∫¢nh sau khi x·ª≠ l√Ω", use_container_width=True, channels="GRAY" if len(img_custom_out.shape) == 2 else "RGB")
